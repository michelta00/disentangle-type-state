---
title: "Scores Comparison"
author: "Michel Tarnow"
date: today
format: 
    html:
      toc: true
      self-contained: true
      highlight-style: github
      code-line-numbers: true
editor_options: 
    chunk_output_type: inline
---

## Import Packages

```{r}
suppressPackageStartupMessages({
  library(tidyverse)
  library(UpSetR)
})
```

## Load Data and Prepare Data

### Patches Scores

#### Full Data + Condtion (State) Only - Workflow1

```{r}
# read data from file and assign correct column names
patches_con_full <- read_csv(
  "../../data/sim/02-scores_patches/t100,s80,b0-patches_con_full_loadings.csv",
  col_names = TRUE,
  col_types = "cddd",
  name_repair = "minimal"
)
colnames(patches_con_full)[1] = "gene_id"


# add combinations of scores

## max absolute value
patches_con_full <- patches_con_full %>% 
  mutate(condition_score_Patches_max_abs = pmax(abs(Condition1_score_Patches), 
                                                abs(Condition2_score_Patches)))

## Euclidean norm
patches_con_full <- patches_con_full %>% 
  mutate(condition_score_Patches_eucl_norm = sqrt(Condition1_score_Patches^2 + 
                                                    Condition2_score_Patches^2))


patches_con_full
```

#### HVG Data + Condtion (State) Only - Workflow2

```{r}
# read data from file and assign correct column names
patches_con_hvg <- read_csv(
  "../../data/sim/02-scores_patches/t100,s80,b0-patches_con_hvg_loadings.csv",
  col_names = TRUE,
  col_types = "cddd",
  name_repair = "minimal"
)
colnames(patches_con_hvg)[1] = "gene_id"


# add combinations of scores

## max absolute value
patches_con_hvg <- patches_con_hvg %>% 
  mutate(condition_score_Patches_max_abs = pmax(abs(Condition1_score_Patches), 
                                                abs(Condition2_score_Patches)))

## Euclidean norm
patches_con_hvg <- patches_con_hvg %>% 
  mutate(condition_score_Patches_eucl_norm = sqrt(Condition1_score_Patches^2 + 
                                                    Condition2_score_Patches^2))


patches_con_hvg
```

#### Full Data + Cluster (Type) & Condtion (State) - Workflow3

```{r}
patches_clu_con_full <- read_csv(
  "../../data/sim/02-scores_patches/t100,s80,b0-patches_clu_con_full_loadings.csv",
  col_names = TRUE,
  col_types = "cddd",
  name_repair = "minimal"
)
colnames(patches_clu_con_full)[1] = "gene_id"


# add combinations of scores

## max absolute value
patches_clu_con_full <- patches_clu_con_full %>% 
  mutate(condition_score_Patches_max_abs = pmax(abs(Condition1_score_Patches), 
                                                abs(Condition2_score_Patches)),
         group_score_Patches_max_abs = pmax(abs(Group1_score_Patches),
                                            abs(Group2_score_Patches),
                                            abs(Group3_score_Patches)))

## Euclidean norm
patches_clu_con_full <- patches_clu_con_full %>% 
  mutate(condition_score_Patches_eucl_norm = sqrt(Condition1_score_Patches^2 + 
                                                    Condition2_score_Patches^2),
         group_score_Patches_eucl_norm = sqrt(Group1_score_Patches^2 +
                                                Group2_score_Patches^2 +
                                                Group3_score_Patches^2))


patches_clu_con_full
```

#### HVG Data + Cluster (Type) & Condtion (State) - Workflow4

```{r}
patches_clu_con_hvg <- read_csv(
  "../../data/sim/02-scores_patches/t100,s80,b0-patches_clu_con_hvg_loadings.csv",
  col_names = TRUE,
  col_types = "cddd",
  name_repair = "minimal"
)
colnames(patches_clu_con_hvg)[1] = "gene_id"


# add combinations of scores

## max absolute value
patches_clu_con_hvg <- patches_clu_con_hvg %>% 
  mutate(condition_score_Patches_max_abs = pmax(abs(Condition1_score_Patches), 
                                                abs(Condition2_score_Patches)),
         group_score_Patches_max_abs = pmax(abs(Group1_score_Patches),
                                            abs(Group2_score_Patches),
                                            abs(Group3_score_Patches)))

## Euclidean norm
patches_clu_con_hvg <- patches_clu_con_hvg %>% 
  mutate(condition_score_Patches_eucl_norm = sqrt(Condition1_score_Patches^2 + 
                                                    Condition2_score_Patches^2),
         group_score_Patches_eucl_norm = sqrt(Group1_score_Patches^2 +
                                                Group2_score_Patches^2 +
                                                Group3_score_Patches^2))


patches_clu_con_hvg
```

### FSS Scores and Selections

#### FSS Scores

```{r}
# read in RDS objects
# fss_tf_rds <- readRDS("../../data/sim/02-scores_fss/sco-t100,s80,b0,tF.rds")
# fss_pve_rds <- readRDS("../../data/sim/02-scores_fss/sco-t100,s80,b0,PVE.rds")
# fss_spbds_rds <- readRDS("../../data/sim/02-scores_fss/sco-t100,s80,b0,sPBDS.rds")
# fss_hvg_rds <- readRDS("../../data/sim/02-scores_fss/sco-t100,s80,b0,HVG.rds")
# fss_random_rds <- readRDS("../../data/sim/02-scores_fss/sco-t100,s80,b0,random.rds")
```

```{r}
# get all files containing FSS scores
rds_files <- list.files(
  "../../data/sim/02-scores_fss/",
  pattern = "\\.rds$", 
  full.names = TRUE
)

# select gene and score columns and combine all dfs in one list
fss_score_dfs <- lapply(rds_files, function(file) {
  
  # get df from file name
  df <- readRDS(file)
  
  # rename score value column to score name
  if (nrow(df) > length(unique(df$gene_id))) {
    # df contains both tPVE and sPVE scores
    df <- df %>% 
      pivot_wider(names_from = sco, values_from = sco_val)
    cols_to_keep <- c("gene_id", "tPVE", "sPVE")
  } else {
    # df contains a single score
    new_colname <- df$sco[1]
    df <- df %>% 
      rename(!!new_colname := sco_val)
    cols_to_keep <- c("gene_id", new_colname)
  }
  
  # select gene and score columns
  df <- df %>% 
    select(gene_id, all_of(cols_to_keep))
})

# combine all dfs in one df
fss_scores_full <- as_tibble(reduce(
  fss_score_dfs, 
  ~ inner_join(.x, .y, by = "gene_id")
))

fss_scores_full
```

```{r}
# subset FSS scores df to match HVGs from Patches workflows 2 and 4
hvgs <- patches_clu_con_hvg$gene_id
fss_scores_hvg <- fss_scores_full[fss_scores_full$gene_id %in% hvgs,]

fss_scores_hvg
```

#### Gene Ground Truths (FSS Selections)

Gene ground truths, i.e., whether a gene is considered a type or a state gene, can be obtained from the simulated data via the logFC of splatter's DE factor (e.g., `ConditionDE.Condition1` or `GroupDE.Group1` in gene metadata). A gene is considered DEnotDS if there is a group logFC unequal to 1 and no condition logFC unequal to 1. Similarly, a gene is considered DS if there is a condition logFC unequal to 1, regardless of group logFCs. DEnotDS genes are selected as ground truth type genes, while DS genes are selected for ground truth state genes, i.e., a type gene must have a group effect and no state effect, while a state gene must have a condition effect while a group effect is not necessary (but can exist).

Here, all selections from the FSS paper's workflow are loaded for the t100,s80,b0 experiment and combined. This includes the selection strategies based on simulation parameters (like DEnotDS and DS) as well as selection strategies based on feature scores. 

```{r}
# get all files containing selections
rds_files <- list.files(
  "../../data/sim/03-selections_fss/",
  pattern = "\\.rds$", 
  full.names = TRUE
)

# select gene and selection columns and combine all dfs in one list
fss_selection_dfs <- lapply(rds_files, function(file) {
  
  # get df from file name
  df <- readRDS(file)
  
  # df contains a single selection
  new_colname <- df$sel[1]
  df <- df %>% 
    rename(!!new_colname := sel_val)
  cols_to_keep <- c("gene_id", new_colname)
  
  # select gene and score columns
  df <- df %>% 
    select(gene_id, all_of(cols_to_keep))
})

# combine all dfs in one df
fss_selections <- as_tibble(reduce(
  fss_selection_dfs, 
  ~ inner_join(.x, .y, by = "gene_id")
))

# sort columns to put ground truths first
fss_selections_full <- fss_selections %>% 
  select(gene_id, DEnotDS, DS, DSnotDE, DEgtDS, DSgtDE, DE, everything())

fss_selections_full
```

```{r}
# subset FSS selections df to match HVGs from Patches workflows 2 and 4
hvgs <- patches_clu_con_hvg$gene_id
fss_selections_hvg <- fss_selections_full[fss_selections_full$gene_id %in% hvgs,]

fss_selections_hvg
```

#### Gene Metadata

```{r}
gene_md <- as_tibble(readRDS("../../data/sim/01-pro/t100,s80,b0-rd.rds")) %>% 
  select(gene_id, everything())

gene_md
```

## Comparison 1: Selected Genes and Gene Ground Truths

### Helper Functions

```{r}
# get top n genes via specified score
get_top_n_genes <- function(df, score, n) {
  top_genes <- (df %>% 
    arrange(desc(.data[[score]])) %>% 
    slice_head(n = n))$gene_id
  
  return(top_genes)
}
```

### Gene Ground Truths

```{r}
# get true type genes (DEnotDS)
true_tg_full <- (fss_selections_full %>% 
  filter(DEnotDS == TRUE) %>% 
  select(gene_id))$gene_id

true_tg_hvg <- (fss_selections_hvg %>% 
  filter(DEnotDS == TRUE) %>% 
  select(gene_id))$gene_id

# get number of true type genes
nt_full <- length(true_tg_full)
nt_hvg <- length(true_tg_hvg)

# get true state genes (DS)
true_sg_full <- (fss_selections_full %>% 
  filter(DS == TRUE) %>% 
  select(gene_id))$gene_id

true_sg_hvg <- (fss_selections_hvg %>% 
  filter(DS == TRUE) %>% 
  select(gene_id))$gene_id 

# get the same number of predicted state genes via top-n Patches scores
ns_full <- length(true_sg_full)
ns_hvg <- length(true_sg_hvg)
```

### FSS Scores

#### FSS Scores Full

```{r}
# type genes based on tF score
fss_full_tg_tF <- get_top_n_genes(
  fss_scores_full,
  "tF",
  nt_full
)

# type genes based on tPVE score
fss_full_tg_tPVE <- get_top_n_genes(
  fss_scores_full,
  "tPVE",
  nt_full
)

# state genes based on sPBDS score
fss_full_sg_sPBDS <- get_top_n_genes(
  fss_scores_full,
  "sPBDS",
  ns_full
)

# state genes based on sPVE score
fss_full_sg_sPVE <- get_top_n_genes(
  fss_scores_full,
  "sPVE",
  ns_full
)
```

```{r}
# combine all gene sets into one list for plotting
gene_sets_fss_full <- list(
  GroundTruthType = true_tg_full,
  GroundTruthState = true_sg_full,
  tF_full = fss_full_tg_tF,
  tPVE_full = fss_full_tg_tPVE,
  sPBDS_full = fss_full_sg_sPBDS,
  sPVE_full = fss_full_sg_sPVE
)

# type ground truth vs. FSS tF selection
upset(
  fromList(gene_sets_fss_full),
  order.by = "freq",
  sets = c("GroundTruthType", "tF_full")
)

# type ground truth vs. FSS tPVE selection
upset(
  fromList(gene_sets_fss_full),
  order.by = "freq",
  sets = c("GroundTruthType", "tPVE_full")
)

# state ground truth vs. FSS sPBDS selection
upset(
  fromList(gene_sets_fss_full),
  order.by = "freq",
  sets = c("GroundTruthState", "sPBDS_full")
)

# state ground truth vs. FSS sPVE selection
upset(
  fromList(gene_sets_fss_full),
  order.by = "freq",
  sets = c("GroundTruthState", "sPVE_full")
)
```

#### FSS Scores HVG

```{r}
# type genes based on tF score
fss_hvg_tg_tF <- get_top_n_genes(
  fss_scores_hvg,
  "tF",
  nt_hvg
)

# type genes based on tPVE score
fss_hvg_tg_tPVE <- get_top_n_genes(
  fss_scores_hvg,
  "tPVE",
  nt_hvg
)

# state genes based on sPBDS score
fss_hvg_sg_sPBDS <- get_top_n_genes(
  fss_scores_hvg,
  "sPBDS",
  ns_hvg
)

# state genes based on sPVE score
fss_hvg_sg_sPVE <- get_top_n_genes(
  fss_scores_hvg,
  "sPVE",
  ns_hvg
)
```

```{r}
# combine all gene sets into one list for plotting
gene_sets_fss_hvg <- list(
  GroundTruthType = true_tg_hvg,
  GroundTruthState = true_sg_hvg,
  tF_hvg = fss_hvg_tg_tF,
  tPVE_hvg = fss_hvg_tg_tPVE,
  sPBDS_hvg = fss_hvg_sg_sPBDS,
  sPVE_hvg = fss_hvg_sg_sPVE
)

# type ground truth vs. FSS tF selection
upset(
  fromList(gene_sets_fss_hvg),
  order.by = "freq",
  sets = c("GroundTruthType", "tF_hvg")
)

# type ground truth vs. FSS tPVE selection
upset(
  fromList(gene_sets_fss_hvg),
  order.by = "freq",
  sets = c("GroundTruthType", "tPVE_hvg")
)

# state ground truth vs. FSS sPBDS selection
upset(
  fromList(gene_sets_fss_hvg),
  order.by = "freq",
  sets = c("GroundTruthState", "sPBDS_hvg")
)

# state ground truth vs. FSS sPVE selection
upset(
  fromList(gene_sets_fss_hvg),
  order.by = "freq",
  sets = c("GroundTruthState", "sPVE_hvg")
)
```

### Patches Scores

#### Full Data + Condtion (State) Only - Workflow1

```{r}
# type genes based on common score
patches_con_full_tg_common <- get_top_n_genes(
  patches_con_full,
  "common_score_Patches",
  nt_full
)

# state genes based on max absolute score
patches_con_full_sg_max_abs <- get_top_n_genes(
  patches_con_full,
  "condition_score_Patches_max_abs",
  ns_full
)

# state genes based on Euclidean norm score
patches_con_full_sg_eucl_norm <- get_top_n_genes(
  patches_con_full,
  "condition_score_Patches_eucl_norm",
  ns_full
)
```

```{r}
# combine all gene sets into one list for plotting
gene_sets_con_full <- list(
  GroundTruthType = true_tg_full,
  GroundTruthState = true_sg_full,
  PatchesConFullCommon = patches_con_full_tg_common,
  PatchesConFullMaxAbs = patches_con_full_sg_max_abs,
  PatchesConFullEuclNorm = patches_con_full_sg_eucl_norm
)

# type ground truth vs. Patches common score selection
upset(
  fromList(gene_sets_con_full),
  order.by = "freq",
  sets = c("GroundTruthType", "PatchesConFullCommon")
)

# state ground truth vs. Patches condition max absolute selection
upset(
  fromList(gene_sets_con_full),
  order.by = "freq",
  sets = c("GroundTruthState", "PatchesConFullMaxAbs")
)

# state ground truth vs. Patches condition Euclidean norm selection
upset(
  fromList(gene_sets_con_full),
  order.by = "freq",
  sets = c("GroundTruthState", "PatchesConFullEuclNorm")
)
```

#### HVG Data + Condtion (State) Only - Workflow2

```{r}
# types genes based on common score
patches_con_hvg_tg_common <- get_top_n_genes(
  patches_con_hvg,
  "common_score_Patches",
  nt_hvg
)

# state genes based on max absolute score
patches_con_hvg_sg_max_abs <- get_top_n_genes(
  patches_con_hvg,
  "condition_score_Patches_max_abs",
  ns_hvg
)

# state genes based on Euclidean norm score
patches_con_hvg_sg_eucl_norm <- get_top_n_genes(
  patches_con_hvg,
  "condition_score_Patches_eucl_norm",
  ns_hvg
)
```

```{r}
# combine all gene sets into one list for plotting
gene_sets_con_hvg <- list(
  GroundTruthType = true_tg_hvg,
  GroundTruthState = true_sg_hvg,
  PatchesConHVGCommon = patches_con_hvg_tg_common,
  PatchesConHVGMaxAbs = patches_con_hvg_sg_max_abs,
  PatchesConHVGEuclNorm = patches_con_hvg_sg_eucl_norm
)

# type ground truth vs. Patches common score selection
upset(
  fromList(gene_sets_con_hvg),
  order.by = "freq",
  sets = c("GroundTruthType", "PatchesConHVGCommon")
)

# state ground truth vs. Patches condition max absolute selection
upset(
  fromList(gene_sets_con_hvg),
  order.by = "freq",
  sets = c("GroundTruthState", "PatchesConHVGMaxAbs")
)

# state ground truth vs. Patches condition Euclidean norm selection
upset(
  fromList(gene_sets_con_hvg),
  order.by = "freq",
  sets = c("GroundTruthState", "PatchesConHVGEuclNorm")
)
```

#### Full Data + Cluster (Type) & Condtion (State) - Workflow3

```{r}
# type genes based on common score
patches_clu_con_full_tg_common <- get_top_n_genes(
  patches_clu_con_full,
  "common_score_Patches",
  nt_full
)

# type genes based on max absolute score
patches_clu_con_full_tg_max_abs <- get_top_n_genes(
  patches_clu_con_full,
  "group_score_Patches_max_abs",
  nt_full
)

# type genes based on Euclidean norm score
patches_clu_con_full_tg_eucl_norm <- get_top_n_genes(
  patches_clu_con_full,
  "group_score_Patches_eucl_norm",
  nt_full
)

# state genes based on max absolute score
patches_clu_con_full_sg_max_abs <- get_top_n_genes(
  patches_clu_con_full,
  "condition_score_Patches_max_abs",
  ns_full
)

# state genes based on Euclidean norm score
patches_clu_con_full_sg_eucl_norm <- get_top_n_genes(
  patches_clu_con_full,
  "condition_score_Patches_eucl_norm",
  ns_full
)
```

```{r}
# combine all gene sets into one list for plotting
gene_sets_clu_con_full <- list(
  GroundTruthType = true_tg_full,
  GroundTruthState = true_sg_full,
  PatchesCluConFullCommon = patches_clu_con_full_tg_common,
  PatchesCluConFullMaxAbsType = patches_clu_con_full_tg_max_abs,
  PatchesCluConFullEuclNormType = patches_clu_con_full_tg_eucl_norm,
  PatchesCluConFullMaxAbsState = patches_clu_con_full_sg_max_abs,
  PatchesCluConFullEuclNormState = patches_clu_con_full_sg_eucl_norm
)

# type ground truth vs. Patches common score selection
upset(
  fromList(gene_sets_clu_con_full),
  order.by = "freq",
  sets = c("GroundTruthType", "PatchesCluConFullCommon")
)

# type ground truth vs. Patches group max absolute selection
upset(
  fromList(gene_sets_clu_con_full),
  order.by = "freq",
  sets = c("GroundTruthType", "PatchesCluConFullMaxAbsType")
)

# type ground truth vs. Patches group Euclidean norm selection
upset(
  fromList(gene_sets_clu_con_full),
  order.by = "freq",
  sets = c("GroundTruthType", "PatchesCluConFullEuclNormType")
)

# state ground truth vs. Patches condition max absolute selection
upset(
  fromList(gene_sets_clu_con_full),
  order.by = "freq",
  sets = c("GroundTruthState", "PatchesCluConFullMaxAbsState")
)

# state ground truth vs. Patches condition Euclidean norm selection
upset(
  fromList(gene_sets_clu_con_full),
  order.by = "freq",
  sets = c("GroundTruthState", "PatchesCluConFullEuclNormState")
)
```

#### HVG Data + Cluster (Type) & Condtion (State) - Workflow4

```{r}
# type genes based on common score
patches_clu_con_hvg_tg_common <- get_top_n_genes(
  patches_clu_con_hvg,
  "common_score_Patches",
  nt_hvg
)

# type genes based on max absolute score
patches_clu_con_hvg_tg_max_abs <- get_top_n_genes(
  patches_clu_con_hvg,
  "group_score_Patches_max_abs",
  nt_hvg
)

# type genes based on Euclidean norm score
patches_clu_con_hvg_tg_eucl_norm <- get_top_n_genes(
  patches_clu_con_hvg,
  "group_score_Patches_eucl_norm",
  nt_hvg
)

# state genes based on max absolute score
patches_clu_con_hvg_sg_max_abs <- get_top_n_genes(
  patches_clu_con_hvg,
  "condition_score_Patches_max_abs",
  ns_hvg
)

# state genes based on Euclidean norm score
patches_clu_con_hvg_sg_eucl_norm <- get_top_n_genes(
  patches_clu_con_hvg,
  "condition_score_Patches_eucl_norm",
  ns_hvg
)
```

```{r}
# combine all gene sets into one list for plotting
gene_sets_clu_con_hvg <- list(
  GroundTruthType = true_tg_hvg,
  GroundTruthState = true_sg_hvg,
  PatchesCluConHVGCommon = patches_clu_con_hvg_tg_common,
  PatchesCluConHVGMaxAbsType = patches_clu_con_hvg_tg_max_abs,
  PatchesCluConHVGEuclNormType = patches_clu_con_hvg_tg_eucl_norm,
  PatchesCluConHVGMaxAbsState = patches_clu_con_hvg_sg_max_abs,
  PatchesCluConHVGEuclNormState = patches_clu_con_hvg_sg_eucl_norm
)

# type ground truth vs. Patches common score selection
upset(
  fromList(gene_sets_clu_con_hvg),
  order.by = "freq",
  sets = c("GroundTruthType", "PatchesCluConHVGCommon")
)

# type ground truth vs. Patches group max absolute selection
upset(
  fromList(gene_sets_clu_con_hvg),
  order.by = "freq",
  sets = c("GroundTruthType", "PatchesCluConHVGMaxAbsType")
)

# type ground truth vs. Patches group Euclidean norm selection
upset(
  fromList(gene_sets_clu_con_hvg),
  order.by = "freq",
  sets = c("GroundTruthType", "PatchesCluConHVGEuclNormType")
)

# state ground truth vs. Patches condition max absolute selection
upset(
  fromList(gene_sets_clu_con_hvg),
  order.by = "freq",
  sets = c("GroundTruthState", "PatchesCluConHVGMaxAbsState")
)

# state ground truth vs. Patches condition Euclidean norm selection
upset(
  fromList(gene_sets_clu_con_hvg),
  order.by = "freq",
  sets = c("GroundTruthState", "PatchesCluConHVGEuclNormState")
)
```












### Type Genes

```{r}
# get true type genes
true_tg <- (fss_selections %>% 
  filter(DEnotDS == TRUE) %>% 
  select(gene_id))$gene_id

# get the same number of predicted type genes via top-n Patches scores
nt <- length(true_tg)

t_abs <- rank(patches_clu_con$group_score_Patches_max_abs)
o_abs <- order(t_abs, decreasing = TRUE)
patches_tg_abs <- patches_clu_con$gene_id[o_abs[seq_len(nt)]]

t_eucl <- rank(patches_clu_con$group_score_Patches_eucl_norm)
o_eucl <- order(t_eucl, decreasing = TRUE)
patches_tg_eucl <- patches_clu_con$gene_id[o_eucl[seq_len(nt)]]

# compare overlap
gene_sets <- list(
  GroundTruth = true_tg,
  PatchesMaxAbs = patches_tg_abs,
  PatchesEuclNorm = patches_tg_eucl
)

upset(fromList(gene_sets),
      order.by = "freq",
      sets = c("GroundTruth", "PatchesMaxAbs"))
upset(fromList(gene_sets),
      order.by = "freq",
      sets = c("GroundTruth", "PatchesEuclNorm"))
```

### State Genes

```{r}
# get true state genes
true_sg <- (fss_selections %>% 
  filter(DS == TRUE) %>% 
  select(gene_id))$gene_id

# get the same number of predicted state genes via top-n Patches scores
nt <- length(true_sg)

t_abs <- rank(patches_clu_con$condition_score_Patches_max_abs)
o_abs <- order(t_abs, decreasing = TRUE)
patches_sg_abs <- patches_clu_con$gene_id[o_abs[seq_len(nt)]]

t_eucl <- rank(patches_clu_con$condition_score_Patches_eucl_norm)
o_eucl <- order(t_eucl, decreasing = TRUE)
patches_sg_eucl <- patches_clu_con$gene_id[o_eucl[seq_len(nt)]]

# compare overlap
gene_sets <- list(
  GroundTruth = true_sg,
  PatchesMaxAbs = patches_sg_abs,
  PatchesEuclNorm = patches_sg_eucl
)

upset(fromList(gene_sets),
      order.by = "freq",
      sets = c("GroundTruth", "PatchesMaxAbs"))
upset(fromList(gene_sets),
      order.by = "freq",
      sets = c("GroundTruth", "PatchesEuclNorm"))
```

## Comparison 2: Patches Scores and FSS scores

```{r}
all_scores <- cbind.data.frame(
  fss_scores,
  patches_clu_con %>% 
    select(
      condition_score_Patches_max_abs,
      group_score_Patches_max_abs,
      condition_score_Patches_eucl_norm,
      group_score_Patches_eucl_norm,
      common_score_Patches
    )
)
```

```{r}
cor(all_scores$sPBDS, all_scores$group_score_Patches_max_abs, method = "spearman")
```


```{r}
ggplot(data = all_scores, mapping = aes(x = (tPVE - mean(tPVE)) / sd(tPVE), y = (group_score_Patches_max_abs - mean(group_score_Patches_max_abs)) / sd(group_score_Patches_max_abs))) +
  geom_point() +
  geom_smooth() +
  theme_minimal()
```































